{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "AddComponent.svelte",
    "BirthdayCounter.svelte",
    "BirthdayCounterConfig.svelte",
    "EditComponent.svelte",
    "EditSpanField.svelte",
    "FlowVariable.svelte",
    "FlowVariableConfig.svelte",
    "Header.svelte",
    "IPAddress.svelte",
    "IPAddressConfig.svelte",
    "IntIPAddress.svelte",
    "IntIPAddressConfig.svelte",
    "Script.svelte",
    "ScriptBar.svelte",
    "ScriptConfig.svelte",
    "Separator.svelte",
    "SeparatorConfig.svelte",
    "WebLink.svelte",
    "WebLinkConfig.svelte",
    "WebView.svelte",
    "main.svelte"
  ],
  "sourcesContent": [
    "<div id='addComponentDialog'>\n  <label class=\"componentLabel\" \n         for=\"componentName\">\n    What's the name?\n  </label>\n  <input type=\"text\"\n         class=\"componentInput\"\n         id=\"componentName\"\n         color=\"{styles.appBackground}\"\n         bind:value={componentName} />\n  <label for=\"componentTypeInput\"\n         class=\"componentLabel\" >\n    What Type of Component?\n  </label>\n  <select name=\"componentTypeInput\" \n          class=\"componentInput\"\n          color=\"{styles.appBackground}\"\n          id=\"componentTypeInput\"\n          bind:value={componentType} >\n    {#each types as type}\n      <option>{type.moduleName}</option>\n    {/each}\n  </select>\n  <label for=\"componentHeight\"\n         class=\"componentLabel\" >\n    Height: \n  </label>\n  <input type=\"text\"\n         class=\"componentInput\"\n         color=\"{styles.appBackground}\"\n         id=\"componentHeight\"\n         bind:value={componentHeight} />\n  {#if componentConfigWidget !== null}\n    <svelte:component\n        this={componentConfigWidget.config} \n        style={styles}\n        config={componentConfig}\n        on:change={(e) => { componentConfig = e.detail; }}\n    />\n  {/if}\n  <button id=\"addComponentButton\"\n          type=\"button\"\n          color=\"{styles.appBackground}\"\n          on:click=\"{() => { addComponent(); }}\" >\n    Add Component\n  </button>\n</div>\n\n<style>\n  #addComponentDialog {\n    width: 100%;\n    height: 100%;\n    display: flex;\n    flex-direction: column;\n    margin: 5px;\n    padding: 0px;\n  }\n\n  #addComponentButton {\n    border-radius: 5px;\n    font-size: 15px;\n    height: 30px;\n    outline: none;\n    margin: 10px;\n    padding: 6px 6px 6px 6px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    outline-style:none;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount, tick } from 'svelte';\n  \n  export let styles;\n  export let types;\n  export let adjust;\n\n  const dispatch = createEventDispatcher();\n  \n  let componentType = null;\n  let componentHeight = 30;  \n  let componentName = \"\";\n  let componentConfig = {};\n  let componentConfigWidget = null;\n  let addDialogHeight = 280;\n  \n  $: componentConfigWidget = getConfigWidget(componentType);\n\n  onMount(() => {\n    tick();\n    componentType = types[0].moduleName;\n    componentConfigWidget = getConfigWidget(componentType);\n  })\n\n  function getConfigWidget(type) {\n    var comtype = {};\n    if(type !== null) {\n      comtype = types.find((comt) => { return comt.moduleName === type});\n    }\n    adjust(false, addDialogHeight + comtype.configHeight);\n    return comtype;\n  }\n\n  function addComponent() {\n    if(componentConfig === null) {\n      componentConfig = {};\n    }\n    dispatch('addNewComponent', {\n      module: {\n        name: componentName,\n        widgetName: componentType,\n        height: parseInt(componentHeight, 10),\n        config: componentConfig\n      }\n    });\n    componentName = '';\n    componentType = null;\n    componentHeight = 30;\n    componentConfig = {};\n  }\n</script>\n",
    "<div class='main' \n     style=\"height: {Math.floor(height)}px;\" \n     data-index=\"{index}\"\n     bind:this={dom}>\n  <p on:dblclick={(e) => { dispatch('dblclick',{});}} \n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n     class='name' style=\"font-size: {style.fontSize};\"\n     data-index=\"{index}\"\n  >\n    {disName}\n  </p>\n  <p class='value' \n     style=\"font-size: {style.fontSize};\"\n     data-index=\"{index}\"\n  >\n    {value}\n  </p>\n</div>\n\n<style>\n  .main {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .name {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .value {\n    margin: 0px 0px 0px auto;\n    padding: 0px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket = null;\n  export let index;\n  export let height;\n  export let dom;\n\n  let value = 'loading...';\n  let disName;\n\n  const dispatch = createEventDispatcher();\n\n  $: NewSocket(socket);\n  $: updateWidget(index);\n  \n  //\n  // I'm using a reactive function call due to the fact that \n  // on mounting it is null and then it get's updated.\n  //\n  function NewSocket(soc) {\n    if(soc !== null) {\n      soc.on(config.flowVar, (data) => {\n        if((data !== null) && (typeof data.days !== 'undefined')) {\n          value = data.days;\n          disName = name + ': ' + data.age;\n        }\n      });\n    }\n  }\n\n  onMount(() => {\n    disName = name;\n  })\n  \n  function updateWidget(index) {\n    getData();\n    //dispatch('clearUpdate',{});\n  }\n\n  function getData() {\n    //\n    // Get the current value instead of waiting for the next update.\n    //\n    fetch('http://localhost:9978/api/nodered/var/' + config.flowVar)\n                .then((resp) => { \n                  return resp.json();\n                }).then((data) => {\n                  if((data !== null) &&(data.text !== null)) {\n                    if(typeof data.text.days !== 'undefined') {\n                      value = data.text.days;\n                    }\n                    if(typeof data.text.age !== 'undefined') {\n                      disName = name + ': ' + data.text.age;\n                    } else {\n                      disName = name;\n                    }\n                  }\n                })\n                .catch((err) => {\n                  disName = name;\n                  value = \"not reachable\";\n                });\n  }\n  \n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n</script>\n",
    "<div class='BirthdayConfig'>\n  <label for='Name'\n         class='componentLabel' >\n    Who's birthday? (Name of Variable)\n  </label>\n  <input id='Name'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.flowVar}\n         on:change={() => { dispatch('change',{\n          flowVar: config.flowVar\n         });}}\n  />\n</div>\n\n<style>\n  .BirthdayConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  export let config;\n  export let style;\n</script>\n\n",
    "<div id='editComponentDialog'>\n  <label class=\"componentLabel\" \n         for=\"componentName\">\n    What's the name?\n  </label>\n  <input type=\"text\"\n         class=\"componentInput\"\n         id=\"componentName\"\n         color=\"{styles.appBackground}\"\n         bind:value={componentName} />\n  <label for=\"componentHeight\"\n         class=\"componentLabel\" >\n    Height: \n  </label>\n  <input type=\"text\"\n         class=\"componentInput\"\n         color=\"{styles.appBackground}\"\n         id=\"componentHeight\"\n         bind:value={componentHeight} />\n  {#if componentConfigWidget !== null}\n    <svelte:component\n        this={componentConfigWidget} \n        style={styles}\n        config={componentConfig}\n        on:change={(e) => { componentConfig = e.detail; }}\n    />\n  {/if}\n  <div id=\"buttonRow\">\n    <button id=\"editComponentButton\"\n            type=\"button\"\n            color=\"{styles.appBackground}\"\n            on:click=\"{() => { editComponent(); }}\" >\n      Save Component\n    </button>\n    <button id=\"deleteComponentButton\"\n            type=\"button\"\n            color=\"{styles.appBackground}\"\n            on:click=\"{() => { deleteComponent(); }}\" >\n      Delete Component\n    </button>\n  </div>\n</div>\n\n<style>\n  #editComponentDialog {\n    display: flex;\n    flex-direction: column;\n    margin: 5px;\n    padding: 0px;\n  }\n\n  #editComponentButton {\n    border-radius: 5px;\n    font-size: 15px;\n    height: 30px;\n    outline: none;\n    margin: 10px;\n    padding: 6px 6px 6px 6px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    outline-style:none;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n  \n  #deleteComponentButton {\n    border-radius: 5px;\n    font-size: 15px;\n    height: 30px;\n    outline: none;\n    margin: 10px 10px 10px auto;\n    padding: 6px 6px 6px 6px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    outline-style:none;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  #buttonRow {\n    display: flex;\n    flex-direction: row;\n    margin: 0px;\n    padding: 0px;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount, tick } from 'svelte';\n  \n  export let styles;\n  export let widget;\n  export let adjust;\n\n  const dispatch = createEventDispatcher();\n  \n  let componentType = null;\n  let componentHeight = 30;  \n  let componentName = \"\";\n  let componentConfig = {};\n  let componentConfigWidget = null;\n  let editDialogHeight = 250;\n\n  $: widget = assignVars(widget);\n\n  onMount(() => {\n    widget = assignVars(widget);\n  })\n\n  function assignVars(wid) {\n    componentConfigWidget = wid.configWidget;\n    componentName = wid.name;\n    componentType = wid.widgetName;\n    componentHeight = wid.height;\n    componentConfig = wid.config;\n    adjust(false, editDialogHeight + wid.configHeight);\n    return(wid);\n  }\n  \n  function editComponent() {\n    if(componentConfig === null) {\n      componentConfig = {};\n    }\n    dispatch('editComponent', {\n      module: {\n        id: widget.id,\n        name: componentName,\n        widgetName: componentType,\n        height: parseInt(componentHeight, 10),\n        config: componentConfig\n      }\n    });\n  }\n  \n  function deleteComponent() {\n    dispatch('deleteComponent', {\n      module: {\n        id: widget.id\n      }\n    });\n  }\n</script>\n",
    "<div class='editSpanField'>\n  {#if editH2Flag}\n    <textarea class='eListName'\n           bind:value={name}\n           bind:this={editField}\n           on:keydown={(e) => {if(e.code === 'Enter') nameChanged(); }}\n           on:blur={() => { nameChanged(); }}\n    />\n    {:else}\n      <span class='pListName'\n        on:dblclick={() => { editName(); }}\n        on:contextmenu={(e) => { e.preventDefault(); middleButton();}}>\n        {name}\n      </span>\n  {/if}\n</div>\n\n<style>\n  .eListName {\n    background-color: rgba(255,255,255,0.3);\n    margin: 5px 0px 0px 0px;\n    width: 90px;\n    padding: 0px;\n    border-radius: 10px;\n    min-height: 16px;\n    max-height: 16px;\n  }\n\n  .pListName {\n    margin: 5px;\n    padding: 0px;\n    min-height: 16px;\n    max-height: 16px;\n  }\n\n  .editSpanField {\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, tick } from 'svelte';\n  \n  export let name;\n  export let styles;\n\n  let editField;\n  let editH2Flag = false;\n\n  const disbatch = createEventDispatcher();\n\n  function middleButton() {\n    disbatch('middleButton',{});\n  }\n  \n  async function editName() {\n    editH2Flag = true;\n    await tick();\n    editField.focus();\n  }\n\n  function nameChanged() {\n    disbatch('nameChanged', {\n      name: editField.value\n    });\n    editH2Flag = false;\n  }\n</script>\n\n",
    "<div class='main' \n     style=\"height: {Math.floor(height)}px;\" \n     data-index=\"{index}\"\n     bind:this={dom}>\n  <p class=\"name\" \n     style=\"font-size: {style.fontSize};\"\n     on:dblclick={(e) => { dispatch('dblclick',{});}}\n     data-index=\"{index}\"\n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n  >{name}</p>\n  <p class=\"value\" \n     style=\"font-size: {style.fontSize};\"\n     data-index=\"{index}\">{value}</p>\n</div>\n\n<style>\n  .main {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .name {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .value {\n    margin: 0px 0px 0px auto;\n    padding: 0px;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount, tick } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n\n  const dispatch = createEventDispatcher();\n  \n  let value = 'loading...';\n\n  $: NewSocket(socket);\n  $: updateWidget(index);\n  \n  //\n  // I'm using a reactive function call due to the fact that \n  // on mounting it is null and then it get's updated.\n  //\n  function NewSocket(soc) {\n    if(soc !== null) {\n      soc.on(config.flowVar, (data) => {\n        if(data !== null) {\n          value = data;\n        }\n      });\n    }\n  }\n\n  function getData() {\n    //\n    // Get the current value instead of waiting for the next update.\n    //\n    fetch('http://localhost:9978/api/nodered/var/' + config.flowVar)\n                .then((resp) => { \n                  return resp.json();\n                }).then((data) => {\n                  if(data !== null) {\n                    if((typeof data.text !== 'undefined')&&(data.text !== null)) {\n                      value = data.text;\n                    }\n                  }\n                });\n  }\n\n  onMount(() => {\n    getData();\n  })\n\n  function updateWidget(index) {\n    getData();\n  }\n\n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n</script>\n",
    "<div class='FlowVariableConfig'>\n  <label for='Name'\n         class='componentLabel' >\n    What is the name of the variable?\n  </label>\n  <input id='Name'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.flowVar}\n         on:change={() => { dispatch('change',{\n          flowVar: config.flowVar\n         });}}\n  />\n</div>\n\n<style>\n  .FlowVariableConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  export let config;\n  export let style;\n</script>\n\n",
    "<div id=\"HeaderOutside\" style=\"width: {width}px; height: {height}px;\">\n    <div id=\"HeaderInside\" style=\"left: {position}px; height: {height}px; border-bottom-color: {background};\" >\n    </div>\n</div>\n\n<style>\n    #HeaderOutside {\n      align-content: center;\n      margin: 0px;\n      padding: 0px;\n    }\n\n    #HeaderInside {\n      position: absolute;\n      color: transparent;\n      top: -9px;\n      margin: 0px;\n      padding: 0px;\n      background-color: transparent;\n      border-top: 0px;        \n      border-left: 5px solid transparent;\n      border-right: 5px solid transparent;\n      border-bottom: 10px solid;\n    }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  \n  export let background = 'red';\n  export let width;\n  export let height;\n\n  let position = 0;\n\n  $: position = adjustHeader(width, height);\n\n  function adjustHeader(wd, ht) {\n    if(typeof wd !== 'undefined') {\n      return Math.floor(wd/2);\n    } else {\n      return(10);\n    }\n  }\n\n  onMount(() => {\n    position = adjustHeader(width, height);\n  })\n</script>\n",
    "<div class='main' \n     style=\"height: {Math.floor(height)}px;\" \n     data-index=\"{index}\"\n     bind:this={dom}>\n  <p class='name' \n     on:dblclick={(e) => { dispatch('dblclick',{});}}\n     style='font-size: {style.fontSize};'\n     data-index=\"{index}\"\n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n     >{name}</p>\n  <p class='value' \n    style='font-size: {style.fontSize};'\n    on:click=\"{(event) => { ClickIP(); }}\"\n    data-index=\"{index}\">{value}</p>\n  </div>\n\n<style>\n  .main {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .name {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .value {\n    margin: 0px 0px 0px auto;\n    padding: 0px;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n  \n  let value = 'loading...';\n  let ipaddress = '';\n  \n  $: NewSocket(socket);\n  $: updateWidget(index);\n   \n  const dispatch = createEventDispatcher();\n  \n  //\n  // I'm using a reactive function call due to the fact that \n  // on mounting it is null and then it get's updated.\n  //\n  function NewSocket(soc) {\n    if(soc !== null) {\n      soc.on(config.flowVar, (data) => {\n        if(data !== null) {\n          if(typeof data.ip !== 'undefined') {\n            value = data.ip;\n          }\n          ipaddress = 'http://' + value + ':' + config.port;\n        }\n      });\n    }\n  }\n\n  function ClickIP() {\n    if(config.showLink) {\n      window.nw.Clipboard.get().set(ipaddress);\n    }\n  }\n\n  function updateWidget(index) {\n    getData();\n  }\n\n  function getData() {\n    //\n    // Get the current value instead of waiting for the next update.\n    //\n    fetch('http://localhost:9978/api/nodered/var/' + config.flowVar)\n                .then((resp) => { \n                  return resp.json();\n                }).then((data) => {\n                  if((data !== null)&&(data.text !== null)) {\n                    if(typeof data.text.ip !== 'undefined') {\n                      value = data.text.ip;\n                    }\n                    ipaddress = 'http://' + value + ':' + config.port;\n                  } else {\n                    value = 'loading...';\n                    ipaddress = '';\n                  }\n                });\n  }\n\n  onMount(() => {\n    getData();\n  })\n  \n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n</script>\n",
    "<div class='IPAddressConfig'>\n  <label for='Variable'\n         class='componentLabel' >\n    What is the variable name?\n  </label>\n  <input id='Variable'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.flowVar}\n         on:change={valueChanged}\n  />\n  <label for='Link'\n         class='componentLabel' >\n    Have a link?\n  </label>\n  <input id='Link'\n         type=\"checkbox\"\n         class=\"componentInput\"\n         bind:checked={config.showLink}\n         on:change={valueChanged}\n  />\n  <label for='Port'\n         class='componentLabel' >\n    What port to open on click?\n  </label>\n  <input id='Port'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.port}\n         on:change={valueChanged}\n  />\n</div>\n\n<style>\n  .IPAddressConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  export let config;\n  export let style;\n\n  function valueChanged(e) {\n    console.log(config.showLink);\n    dispatch('change',{\n          flowVar: config.flowVar,\n          showLink: config.showLink,\n          port: parseInt(config.port, 10)\n         });\n  }\n</script>\n\n",
    "<div class='main' \n     style=\"height: {Math.floor(height)}px;\" \n     data-index=\"{index}\"\n     bind:this={dom}>\n  <p on:dblclick={(e) => { dispatch('dblclick',{});}} \n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n     class='name' style='font-size: {style.fontSize};' \n     data-index=\"{index}\"\n  >\n    {name}\n  </p>\n  <p class='value' \n     style='font-size: {style.fontSize};' \n     on:click=\"{(event) =>{ clickIP();}}\" data-index=\"{index}\"\n  >\n    {value}\n  </p>\n</div>\n\n<style>\n  .main {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .name {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .value {\n    margin: 0px 0px 0px auto;\n    padding: 0px;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n\n  let value = 'loading...';\n  let ipaddress = '';\n  \n  const dispatch = createEventDispatcher();\n  \n  $: updateWidget(index);\n  \n  function getData() {\n    //\n    // Get the current value instead of waiting for the next update.\n    //\n    fetch('http://localhost:9978/api/getip')\n                .then((resp) => { \n                  return resp.json();\n                }).then((data) => {\n                  if(data !== null) {\n                    if(typeof data.ip !== 'undefined') {\n                      value = data.ip;\n                    }\n                    ipaddress = 'http://' + value + ':' + config.port;\n                  }\n                });\n  }\n\n  onMount(() => {\n    getData();\n  })\n\n  function updateWidget(index) {\n    getData();\n  }\n\n  function clickIP() {\n    if(config.showLink) {\n      window.nw.Clipboard.get().set(ipaddress);\n    }\n  }\n  \n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n</script>\n",
    "<div class='IntIPAddressConfig'>\n  <label for='Name'\n         class='componentLabel' >\n    Have a link?\n  </label>\n  <input id='Name'\n         type=\"checkbox\"\n         class=\"componentInput\"\n         bind:checked={config.showLink}\n         on:change={valueChanged}\n  />\n  <label for='Port'\n         class='componentLabel' >\n    What port to open on click?\n  </label>\n  <input id='Port'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.port}\n         on:change={valueChanged}\n  />\n</div>\n\n<style>\n  .IntIPAddressConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  export let config;\n  export let style;\n\n  function valueChanged(e) {\n    dispatch('change',{\n      showLink: config.showLink,\n      port: parseInt(config.port, 10)\n    });\n  }\n</script>\n\n",
    "<div class='script' \n     style=\"height: {Math.floor(height)}px;\" \n     data-index=\"{index}\"\n     bind:this={dom}\n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}>\n  <span class='scriptName'\n        on:dblclick={(e) => { dispatch('dblclick', {})}}\n  >\n    {name}\n  </span>\n  <span class='scriptValue' \n        on:click={(e) => { sendWebView(); }}\n  >\n    {#if vHTML}\n      {@html value}\n    {:else}\n      {value}\n    {/if}\n  </span>\n</div>\n\n<style>\n  .script {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .scriptName {\n    margin: 0px;\n    padding: 0px;\n  }\n\n  .scriptValue {\n    margin: 0px 0px 0px auto;\n    padding: 0px;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config = {\n    script: \"\",\n    env: \"\",\n    envVar: \"\",\n    commandLine: \"\",\n    type: \"\",\n    scriptImage: ''\n  };\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n  \n  let value = 'loading...';\n  let bodyHTML = '<h1>Loading...</h1>';\n  let vHTML = false;\n  let bodyConfig = {\n    width: 300,\n    height: 300,\n    showButton: true\n  };\n\n  const dispatch = createEventDispatcher();\n  \n  $: updateWidget(index);\n  \n  function getData() {\n    //\n    // Get the current value instead of waiting for the next update.\n    // TODO: total rewrite\n    //\n    var callBody = JSON.stringify({\n        script: config.script,\n        text: config.commandLine,\n        env: config.env,\n        envVar: config.envVar,\n        commandLine: config.commandLine\n      });\n    fetch('http://localhost:9978/api/script/run/',{\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json;charset=utf-8'\n      },\n      body: callBody \n    })\n    .then((resp) => { \n      return resp.json();\n    }).then((data) => {\n      if(data !== null) {\n        processScriptData(data);\n      }\n    });\n  }\n\n  onMount(() => {\n    getData();\n  })\n\n  function updateWidget(index) {\n    getData();\n    index = index;\n  }\n\n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n\n  function sendWebView() {\n    if((typeof value === 'string') && (!value.includes(\"loading...\"))) {\n      dispatch('changeView',{\n        name: 'webview',\n        body: {\n          html: bodyHTML,\n          config: bodyConfig\n        }\n      });\n    }\n  }\n\n  function processScriptData(data) {\n    bodyConfig.showButton = true;\n    if(config.type === 'generic') {\n      //\n      // It is a generic script. No processing other than \n      // creating the HTML as text paragraph.\n      //\n      bodyHTML = '<p>'+data.text+'</p>';\n    } else if(config.type === 'bitbar') {\n      //\n      // Process it as a BitBar script.\n      //\n      bodyHTML = data.text;\n    } else if(config.type === 'textbar') {\n      //\n      // Process it as a TextBar Script.\n      //\n      bodyHTML = processTextBarData(data.text);\n    } else if(config.type === 'web') {\n      //\n      // The script output is html. Send it directly.\n      //\n      bodyHTML = data.text;\n    }\n  } \n\n  function processTextBarData(data) {\n    var resultText = '';\n    var resultHTML = '';\n    var maxWidth = 10;\n    var result = null;\n    bodyConfig.height = 10;\n    var count = 1;\n    var viewSet = false;\n    var textbarDirectives = false;\n    var longLine = \"\";\n    bodyConfig.showButton = true;\n    data = String(data);\n    globalThis.ScriptClick = (count, line, script, commandLine, env) => {\n      var newEnv = [];\n      newEnv['TEXTBAR_INDEX'] = count;\n      newEnv['TEXTBAR_TEXT'] = line;\n      var callBody = JSON.stringify({\n          script: script.trim(),\n          text: commandLine.trim(),\n          env: env.trim(),\n          envVar: {...newEnv},\n          commandLine: commandLine.trim()\n        });\n      fetch('http://localhost:9978/api/script/run/',{\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: callBody \n      })\n      .then((resp) => { \n        return resp.json();\n      }).then((data) => {\n        if(data !== null) {\n          globalThis.closeWebView();\n        }\n      });\n    };\n    data = data.split(/\\r?\\n/);\n    value = config.scriptImage + data[0];\n    data.slice(1).forEach( line => {\n      if(line.trim() !== '') {\n        line = new String(line);\n        var banner = line.includes('----TEXTBAR----');\n        if((banner)||(textbarDirectives)) {\n          if(banner) {\n            //\n            // All rest of the lines are part of the directives.\n            //\n            textbarDirectives = true;\n          } else {\n            //\n            // Process each directive.\n            //\n            var parts = line.split('=');\n            switch(parts[0]) {\n              case 'REFRESH':\n                //\n                // TODO: This case isn't currently possible. There isn't\n                //       a timer setup yet.\n                //\n                break;\n              case 'VIEWTYPE':\n                  switch(parts[1]) {\n                    case 'HTML':\n                      result = resultHTML;\n                      bodyConfig.showButton = true;\n                      break;\n                    default:\n                      result = resultText;\n                      bodyConfig.showButton = false;\n                      break;\n                  }\n                break;\n              case 'VIEWSIZE':\n                var sizes = parts[1].split(',');\n                bodyConfig.width = parseInt(sizes[0],10);\n                bodyConfig.height = parseInt(sizes[1],10);\n                viewSet = true;\n                break;\n              case 'IMAGE':\n                  if(parts[1][0] === ':') {\n                    value = '<img src=\"' + parts[1].slice(1) + '\" />';\n                    vHTML = true;\n                  } else {\n                    value = parts[1];\n                  }\n                bodyConfig.showButton = true;\n                break;\n              default:\n                break;\n            }\n          }\n        } else {\n          //\n          // It is the main output lines and not the directive lines.\n          //\n          resultHTML += line;\n          var nline = '';\n          var pline = '';\n          if(line.match(/\\[\\d+(\\:\\d+)*m/) !== null) {\n            //\n            // This line has ASNI codes. Process it as such.\n            //\n            var tline = line.replace(/\\\\e/g,'\\x1b');\n\n            //\n            // Convert ANSI color codes to span colors.\n            //\n            nline = window.ansi_up.ansi_to_html(tline);\n\n            //\n            // Clean the line of unknown escape codes.\n            //\n            nline = nline.replace(/\\[\\d+(\\:\\d+)*m/g,'');\n\n            //\n            // Remove all escapte codes for the plain line.\n            //\n            pline = line.replace(/\\\\e/g,'').replace(/\\[\\d+((\\:|\\;)\\d+)*m/g,'');\n          } else {\n            //\n            // No ANSI codes, process as a plain text line.\n            //\n            nline = line.replace(/ /g,'&nbsp;');\n\n            //\n            // Just use the line for the pline to determine line length.\n            //\n            pline = line;\n          }\n          \n          //\n          // Remove everything but the visible text.\n          //\n          pline = new String(pline);\n          if(maxWidth < pline.length) {\n            maxWidth = pline.length;\n            longLine = pline;\n          }\n          if(line[line.length-1] === ':') {\n            resultText += '<p style=\"margin: 0px; padding: 0px; height: 20px;\">' + nline + '</p>';\n          } else {\n            resultText += '<p style=\"margin: 0px; padding: 0px; height: 20px;\" onclick=\"globalThis.ScriptClick(' + count + ',\\'' + line + '\\',\\'' + config.script + '\\', \\'' + config.commandLine + '\\', \\'' + config.env + '\\')\">' + nline + '</p>';\n          }\n        }\n        count += 1;\n      }\n    });\n\n    //\n    // Setup the height and width of the script output.\n    //\n    if(!viewSet) {\n      bodyConfig.height = count * 20; // Each line is 20px.\n      if(bodyConfig.showbutton) bodyConfig.height += 55;  // Size of the button bar\n      bodyConfig.width = Math.floor(getTextWidth(longLine, '14px Arial')) + 10;\n    }\n    if(result === null) result = resultText;\n    return(result);\n  }\n  \n  function getTextWidth(text, fnt) {\n    if(typeof window.textsize === 'undefined') {\n      window.textsize = document.createElement(\"canvas\");\n      window.textsizeContext = window.textsize.getContext(\"2d\");\n    }\n    window.textsizeContext.font = fnt;\n    return window.textsizeContext.measureText(text).width;\n  }\n</script>\n",
    "<Header background=\"{styles.appBackground}\" width=\"{appWidth}\" height=\"{window.preferences.headerHeight}\" />\n<div id='main' style='width: {appWidth-10}px;\n                      height: {overlay > 0 ? overlay + 'px' : 'auto'};\n                      background-color: {styles.appBackground};\n                      color: {styles.textcolor};\n                      font-family: {styles.fontFamily};\n                      font-size: {styles.fontSize};' >\n  {#if showAdd}\n    <div id=\"addDialog\"\n         style='width: 100%; \n                background-color: {styles.appBackground};\n                color: {styles.textcolor};\n                font-family: {styles.fontFamily};\n                font-size: {styles.fontSize};'>\n      <div id='addDialogControls'>\n        <p id=\"closeAddDialogControl\"\n           on:click=\"{() => { closeAddDialog() }}\">\n          X\n        </p>\n      </div>\n      <AddComponent \n        styles={styles}\n        types={widgetTypes}\n        adjust={newAdjust}\n        on:addNewComponent={addNewComponent}\n      />\n    </div>\n  {/if}\n  {#if showEdit}\n    <div id=\"editDialog\"\n         style='width: 100%; \n                background-color: {styles.appBackground};\n                color: {styles.textcolor};\n                font-family: {styles.fontFamily};\n                font-size: {styles.fontSize};'>\n      <div id='editDialogControls'>\n        <p id=\"closeEditDialogControl\"\n           on:click=\"{() => { closeEditDialog(); }}\">\n          X\n        </p>\n      </div>\n      <EditComponent \n        styles={styles}\n        widget={widgetToEdit}\n        adjust={newAdjust}\n        on:editComponent={editComponent}\n        on:deleteComponent={deleteComponent}\n      />\n    </div>\n  {/if}\n  {#if showContainerMenu }\n    <div id=\"containerMenu\"\n         style=\"background-color: {styles.appBackground};\n                top: {Math.floor((containerRectBox.height/2) + containerRectBox.y)}px; \n                left: {Math.floor(containerRectBox.x + (containerRectBox.width/2))}px;\">\n      {#if currentContainer !== 0}\n        <p class=\"ContainerMenuItem\"\n          on:click={(e) => { moveTabLeft(); }}\n        >\n          Move Left\n        </p>\n      {/if}\n      {#if currentContainer !== (containers.length - 1)}\n        <p class=\"ContainerMenuItem\"\n           on:click={(e) => { moveTabRight(); }}\n        >\n          Move Right\n        </p>\n      {/if}\n      <p class=\"ContainerMenuItem\"\n        on:click={(e) => { deleteTab(); }}\n      >\n        Delete\n      </p>\n    </div>\n  {/if}\n  {#if showComponentMenu }\n    <div id=\"ComponentMenu\"\n         style=\"background-color: {styles.appBackground};\n                top: {Math.floor(componentRectBox.y)}px; \n                left: 20px;\">\n      {#if currentComponent !== 0}\n        <p class=\"ComponentMenuItem\"\n          on:click={(e) => { moveComponentUp(); }}\n        >\n          Up\n        </p>\n      {/if}\n      {#if currentComponent !== (widgets.length - 1)}\n        <p class=\"ComponentMenuItem\"\n           on:click={(e) => { moveComponentDown(); }}\n        >\n          Down\n        </p>\n      {/if}\n    </div>\n  {/if}\n  <div id=\"controls\">\n    <p id=\"addControl\"\n       on:click=\"{() => { openAddDialog(); }}\" >\n      +\n    </p>\n    <p id=\"closeControl\"\n       on:click=\"{() => { if(onClose !== null) onClose();}}\" >\n      X\n    </p>\n  </div>\n  <div id='tabs'>\n    {#each containers as container, index}\n      {#if index === currentContainer}\n        <div class='activeTab' \n             bind:this={container.this}>\n          <EditSpanField \n            name={container.name}\n            styles={styles}\n            on:nameChanged={(e) => { changeContainerName(e.detail.name); }}\n            on:middleButton={(e) => { toggleContainerMenu(); }}\n          />\n        </div>\n      {:else}\n        <div class='tab'\n           on:click={() => { switchContainer(index); }}\n           bind:this={container.this}\n        >\n          {container.name}\n        </div>\n      {/if}\n    {/each}\n    <div id='addTab' class='tab'\n         on:click={() => { addTab(); }}\n    >\n      <span id='addTabText'>+</span>\n    </div>\n  </div>\n  <div id=\"componentList\">\n    {#each widgets as widget, index}\n      <svelte:component\n        index={widget.name + \"-\" + index}\n        height={widget.height}\n        this={widget.widget} \n        style={styles}\n        name={widget.name}\n        config={widget.config}\n        socket={socket}\n        on:dblclick={() => { editWidget(widget); }}\n        bind:dom={widget.dom}\n        on:middleButton={(e) => { e.preventDefault(); toggleComponentMenu(index);}}\n        on:changeView={(e) => { changeView(e.detail); }}\n      />\n    {/each}\n  </div>\n</div>\n\n<style>\n  #main {\n    position: absolute;\n    left: 0px;\n    top: 10px;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    margin: 0px;\n    padding: 5px;\n    border-radius: 10px;\n    overflow-x: hidden;\n    overflow-y: hidden;\n    display: flex;\n    flex-direction: column;\n  }\n  \n  #tabs {\n    display: flex;\n    flex-direction: row;\n    margin: 0px 0px 0px 0px;\n    padding: 0px 0px 0px 0px;\n    overflow-x: auto;\n    overflow-y: hidden;\n    min-height: 30px;\n    max-height: 30px;\n    height: 30px;\n  }\n  \n  #tabs::-webkit-scrollbar {\n    height: 3px;\n    background-color: rgba(255,255,255,0.5);\n    border-radius: 3px;\n  }\n\n  #tabs::-webkit-scrollbar-thumb {\n    height: 3px;\n    background-color: rgba(10,10,10,0.3);\n    border-radius: 3px;\n  }\n\n  #addTab {\n    margin: 0px 0px 0px auto;\n    cursor: pointer;\n  }\n\n  #addTabText {\n    color: red;\n    padding: 0px;\n    margin: 0px;\n  }\n\n  #containerMenu {\n    border: 2px solid rgba(255, 255, 255, 0.3) !important;\n    border-radius: 10px;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    padding: 5px 10px 5px 10px;\n  }\n\n  #closeEditDialogControl {\n    color: red;\n    cursor: pointer;\n    margin: 0px 0px 0px auto;\n  }\n\n  #ComponentMenu {\n    border: 2px solid rgba(255, 255, 255, 0.3) !important;\n    border-radius: 10px;\n    position: absolute;\n    display: flex;\n    flex-direction: column;\n    padding: 5px 10px 5px 10px;\n  }\n\n  .ComponentMenuItem {\n    padding: 0px;\n    margin: 5px 0px 0px 0px;\n  }\n\n  .ComponentMenuItem:hover {\n    color: white;\n  }\n\n  .ContainerMenuItem {\n    cursor: pointer;\n    margin: 5px 0px 0px 0px;\n    padding: 0px;\n  }\n\n  .ContainerMenuItem:hover {\n    color: white;\n  }\n\n  .tab {\n    border: 2px solid rgba(255, 255, 255, 0.3) !important;\n    border-bottom: 0px !important;\n    border-radius: 50% 20% 0px 0px;\n    cursor: pointer;\n    user-select: none;\n    padding: 2px 8px;\n    margin: 0px 1px 0px 0px;\n    height: 20px;\n  }\n\n  .activeTab {\n    border: 2px solid rgba(255, 255, 255, 0.6) !important;\n    border-bottom: 0px !important;\n    border-radius: 50% 20% 0px 0px;\n    cursor: pointer;\n    user-select: none;\n    padding: 2px 8px;\n    margin: 0px 1px 0px 0px;\n    height: 20px;\n  }\n\n  #editDialog {\n    position: absolute;\n    left: 5px;\n    top: 5px;\n    margin: 0px;\n    padding: 5px;\n    height: 100%;\n    width: 100%;\n    border-radius: 10px;\n    overflow-y: scroll;\n    display: flex;\n    flex-direction: column;\n  }\n\n  #editDialogControls {\n    margin: 0px 5px 0px auto;\n    padding: 0px;\n    color: red;\n    cursor: pointer;\n  }\n\n  #addDialog {\n    position: absolute;\n    left: 5px;\n    top: 5px;\n    margin: 0px;\n    padding: 5px;\n    border-radius: 10px;\n    overflow: auto;\n    display: flex;\n    flex-direction: column;\n  }\n\n  #controls {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex;\n    width: 100%;\n    height: 10px;\n    margin: 0px 0px 10px 0px;\n    padding: 0px;\n  }\n\n  #closeControl {\n    margin: 0px 5px 0px auto;\n    padding: 0px;\n    color: red;\n    cursor: pointer;\n  }\n  \n  #addControl {\n    margin: 0px 0px 0px 5px;\n    padding: 0px;\n    color: red;\n    cursor: pointer;\n  }\n\n  #addDialogControls {\n    margin: 0px 5px 0px auto;\n    padding: 0px;\n    color: red;\n    cursor: pointer;\n  }\n\n  #closeAddDialogControl {\n    display: flex;\n    flex-direction: row;\n    justify-content: flex-end;\n    width: 100%;\n    height: 10px;\n    margin: 0px 0px 10px 0px;\n    padding: 0px;\n  }\n\n  #componentList {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    margin: 0px;\n    padding: 0px;\n  }\n\n</style>\n\n<script>\n  import io from 'socket.io-client';\n  import { createEventDispatcher, onMount } from 'svelte';\n  import AddComponent from './AddComponent.svelte';\n  import EditComponent from './EditComponent.svelte';\n  import EditSpanField from './EditSpanField.svelte';\n  import Header from './Header.svelte';\n\n  //\n  // The following components are widgets in the application and \n  // their configuration widget.\n  //\n  import FlowVariable from './FlowVariable.svelte';\n  import FlowVariableConfig from './FlowVariableConfig.svelte';\n  import Separator from './Separator.svelte';\n  import SeparatorConfig from './SeparatorConfig.svelte';\n  import BirthdayCounter from './BirthdayCounter.svelte';\n  import BirthdayCounterConfig from './BirthdayCounterConfig.svelte';\n  import IPAddress from './IPAddress.svelte';\n  import IPAddressConfig from './IPAddressConfig.svelte';\n  import IntIPAddress from './IntIPAddress.svelte';\n  import IntIPAddressConfig from './IntIPAddressConfig.svelte';\n  import Script from './Script.svelte';\n  import ScriptConfig from './ScriptConfig.svelte';\n  import WebLink from './WebLink.svelte';\n  import WebLinkConfig from './WebLinkConfig.svelte';\n    \n  export let adjust;\n  export let styles;\n  export let oldState;\n  export let onClose;\n  \n  let appBaseHeight = 72; // This is the height of everything but the widgets.\n  let containers = [{\n    name: 'Info',\n    widgets: []\n  }];\n  let widgets = [];\n  let widgetTypes;\n  let socket;\n  let showAdd = false;\n  let showEdit = false;\n  let widgetToEdit;\n  let currentID = 0;\n  let currentContainer;\n  let currentComponent;\n  let showContainerMenu = false;\n  let containerRectBox;\n  let showComponentMenu = false;\n  let componentRectBox;\n  let appHeight = window.preferences.appHeight;\n  let appWidth = window.preferences.appWidth;\n  let overlay = 0;\n  let savedHeight = 0;\n  \n  const dispatch = createEventDispatcher();\n\n  onMount(() => {\n    //\n    // Create the widgetTypes structure.\n    //\n    widgetTypes = [{\n      moduleName: 'FlowVariable',\n      module: FlowVariable,\n      config: FlowVariableConfig,\n      configHeight: 70\n    }, {\n      moduleName: 'Separator',\n      module: Separator,\n      config: SeparatorConfig,\n      configHeight: 70\n    }, {\n      moduleName: 'BirthdayCounter',\n      module: BirthdayCounter,\n      config: BirthdayCounterConfig,\n      configHeight: 70\n    }, {\n      moduleName: 'IPAddress',\n      module: IPAddress,\n      config: IPAddressConfig,\n      configHeight: 194\n    }, {\n      moduleName: 'IntIPAddress',\n      module: IntIPAddress,\n      config: IntIPAddressConfig,\n      configHeight: 124\n    }, {\n      moduleName: 'Script',\n      module: Script,\n      config: ScriptConfig,\n      configHeight: 333\n    }, {\n      moduleName: 'WebLink',\n      module: WebLink,\n      config: WebLinkConfig,\n      configHeight: 133\n    }];\n    \n    //\n    // Set the old state if it's been set.\n    //\n    setOldState(oldState);\n    \n    //\n    // Get the widget list from the user's configuration.\n    //\n    getWidgets();\n\n    //\n    // Setup the socket.io connection to listen to.\n    //\n    if((typeof window.preferences.port !== 'undefined') && (window.socketio !== 'undefined')) {\n      socket = io.connect('http://localhost:' + window.preferences.port);\n    }\n  });\n\n  function setOldState(old) {\n    if(typeof old !== 'undefined') {\n      if(typeof old.container !== 'undefined') {\n        currentContainer = old.container;\n        currentComponent = 0;\n      } else {\n        currentContainer = 0;\n        currentComponent = 0;\n      }\n    } else {\n      currentContainer = 0;\n      currentComponent = 0;\n    }\n  }\n\n  function getWidgets() {\n    //\n    // Get the configuration.\n    //\n    fetch('http://localhost:9978/api/scriptbar/config/')\n    .then((resp) => { \n      return resp.json();\n    }).then((data) => {\n        containers = data.config;\n        widgets = [];\n        window.preferences.appHeight = appBaseHeight;\n        if(typeof containers[currentContainer].widgets !== 'undefined') {\n          containers[currentContainer].widgets = addWidgets(containers[currentContainer].widgets);\n        }\n        window.containers = containers;\n    });\n  }\n\n  function switchContainer(contNum) {\n    widgets = [];\n    window.preferences.appHeight = appBaseHeight;\n    currentContainer = contNum;\n    containers[contNum].widgets = addWidgets(containers[contNum].widgets);\n  }\n\n  function saveWidgets() {\n    //\n    // Save the widgets for loading latter.\n    //\n    fetch('http://localhost:9978/api/scriptbar/config/', {\n      method: 'PUT',\n      mode: 'cors', \n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ config: containers })\n    });\n  }\n  \n  function addWidgets(obj) {\n    for(var i = 0; i < obj.length; i++) {\n      var tmp = widgetTypes.find(mod => obj[i].widgetName === mod.moduleName);\n      if(typeof tmp !== 'undefined') {\n        //\n        // Add the widget module definition.\n        //\n        obj[i].widget = tmp.module;\n        obj[i].configWidget = tmp.config;\n        obj[i].configHeight = tmp.configHeight;\n\n        //\n        // Add an ID.\n        //\n        obj[i].id = currentID;\n        currentID = currentID + 1;\n        \n        //\n        // Adjust the height based on the number of widgets. Loop over all the \n        // widgets and add together their heights. It should be a part of it's \n        // structure.\n        //\n        window.preferences.appHeight += obj[i].height;\n        \n        //\n        // Add it to the list of widgets to be displayed.\n        //\n        widgets.push(obj[i]);\n      }\n    }\n    //\n    // Adjust the window.\n    //\n    appHeight = window.preferences.appHeight;\n    newAdjust(true, window.preferences.appHeight, window.defaults.width);\n    containers[currentContainer].widgets = widgets;\n    return widgets;\n  }\n  \n  function addNewComponent(e) {\n    widgets = addWidgets([e.detail.module]);\n    containers[currentContainer].widgets = widgets;\n    closeAddDialog();\n    saveWidgets();\n  }\n\n  function editWidget(widget) {\n    widgetToEdit = widget;\n    openEditDialog();\n  }\n\n  function editComponent(e) {\n    widgets = widgets.map((item) => {\n      if(item.id === e.detail.module.id) {\n        appHeight -= item.height;\n        item.name = e.detail.module.name;\n        item.height = parseInt(e.detail.module.height, 10);\n        item.config = e.detail.module.config;\n        appHeight += item.height;\n      }\n      return(item);\n    })\n    lastComputedHeight = appHeight;\n    closeEditDialog();\n    containers[currentContainer].widgets = widgets;\n    saveWidgets();\n  }\n\n  function deleteComponent(e) {\n    widgets = widgets.filter((item) => {\n      if(item.id !== e.detail.module.id) {\n        return(item);\n      } else {\n        window.preferences.appHeight -= item.height;\n        appHeight -= item.height\n      }\n    });\n    closeEditDialog();\n    containers[currentContainer].widgets = widgets;\n    saveWidgets();\n  }\n\n  function openEditDialog() {\n    showEdit = true;\n  }\n\n  function closeEditDialog() {\n    showEdit = false;\n    appHeight = 65;\n    newAdjust(true, appHeight);\n  }\n\n  function openAddDialog() {\n    showAdd = true;\n  }\n\n  function closeAddDialog() {\n    showAdd = false;\n    appHeight = 65;\n    newAdjust(true, appHeight);\n  }\n\n  function addTab() {\n    containers.push({\n      name: 'New',\n      widgets: []\n    });\n    containers = containers;\n    saveWidgets();\n  }\n\n  function changeContainerName(name) {\n    containers[currentContainer].name = name;\n    containers = containers;\n    saveWidgets();\n  }\n\n  function toggleContainerMenu() {\n    showContainerMenu = !showContainerMenu;\n    if(showContainerMenu) {\n      containerRectBox = containers[currentContainer].this.getBoundingClientRect();\n      savedHeight = appHeight;\n      if(appHeight < 163) {\n        overlay = 163;\n        appHeight = overlay;\n      }\n      newAdjust(false, appHeight);\n    } else {\n      overlay = 0;\n      appHeight = savedHeight;\n      newAdjust(true, appHeight);\n    }\n  }\n\n  function moveTabLeft() {\n    containerRectBox = containers[currentContainer - 1].this.getBoundingClientRect();\n    if(currentContainer !== 0) {\n      var tmp = containers[currentContainer];\n      currentContainer = currentContainer - 1;\n      containers[currentContainer + 1] = containers[currentContainer];\n      containers[currentContainer] = tmp;\n    }\n    containers = containers;\n    saveWidgets();\n  }\n\n  function moveTabRight() {\n    containerRectBox = containers[currentContainer + 1].this.getBoundingClientRect();\n    if(currentContainer !== (containers.length-1)) {\n      var tmp = containers[currentContainer];\n      currentContainer = currentContainer + 1;\n      containers[currentContainer - 1] = containers[currentContainer];\n      containers[currentContainer] = tmp;\n    }\n    containers = containers;\n    saveWidgets();\n  }\n\n  function deleteTab() {\n    containers = containers.filter((item, index) => {\n      if(index !== currentContainer) {\n        return(true);\n      } else {\n        return(false);\n      }\n    });\n    currentContainer = 0;\n    overlay = 0;\n    widgets = [];\n    window.preferences.appHeight = appBaseHeight;\n    containers[currentContainer].widgets = addWidgets(containers[currentContainer].widgets);\n    widgets = containers[currentContainer].widgets;\n    showContainerMenu = false;\n    saveWidgets();\n  }\n\n  function toggleComponentMenu(id) {\n    currentComponent = id;\n    if(widgets.length > 1) {\n      window.widgets = widgets;\n      showComponentMenu = !showComponentMenu;\n      if(showComponentMenu) {\n        componentRectBox = widgets[id].dom.firstChild.getBoundingClientRect();\n        appHeight = window.preferences.appHeight + widgets[id].configHeight;\n        newAdjust(false, appHeight);\n      } else {\n        componentRectBox = {};\n        currentComponent = 0;\n        appHeight = 65;\n        newAdjust(true, appHeight);\n      }\n    }\n  }\n\n  function moveComponentUp() {\n    if(currentComponent !== 0) {\n      componentRectBox = widgets[currentComponent - 1].dom.firstChild.getBoundingClientRect();\n      var tmp = widgets[currentComponent];\n      currentComponent = currentComponent - 1;\n      widgets[currentComponent + 1] = widgets[currentComponent];\n      widgets[currentComponent] = tmp;\n      containers[currentContainer].widgets = widgets;\n    }\n    containers = containers;\n    saveWidgets();\n  }\n\n  function moveComponentDown() {\n    if(currentComponent !== (widgets.length-1)) {\n      componentRectBox = widgets[currentComponent + 1].dom.firstChild.getBoundingClientRect();\n      var tmp = widgets[currentComponent];\n      currentComponent = currentComponent + 1;\n      widgets[currentComponent - 1] = widgets[currentComponent];\n      widgets[currentComponent] = tmp;\n      containers[currentContainer].widgets = widgets;\n    }\n    containers = containers;\n    saveWidgets();\n  }\n\n  function changeView(data) {\n    data.scriptbar = {\n      container: currentContainer\n    };\n    dispatch('changeView', data);\n  }\n\n  function newAdjust(useCalc, minheight, minwidth) {\n    if(typeof minheight !== 'undefined') {\n      appHeight = minheight;\n    }\n    if(typeof minwidth !== 'undefined') {\n      appWidth = minwidth;\n    }\n    adjust(useCalc, appHeight, appWidth);\n  }\n</script>\n\n",
    "<div id='ScriptConfig'>\n  <label for='Name'\n         class='componentLabel' >\n    What is the name of the script?\n  </label>\n  <input id='Name'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.script}\n         on:change={() => { dispatch('change',{\n           script: config.script,\n           env: config.env,\n           envVar: config.envVar,\n           commandLine: config.commandLine,\n           type: config.type,\n           scriptImage: config.scriptImage\n         });}}\n  />\n  <label for='CommandLine'\n         class='componentLabel' >\n    What is the command line?\n  </label>\n  <input id='CommandLine'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.commandLine}\n         on:change={() => { dispatch('change',{\n           script: config.script,\n           env: config.env,\n           envVar: config.envVar,\n           commandLine: config.commandLine,\n           type: config.type,\n           scriptImage: config.scriptImage\n         });}}\n  />\n  <label for='Env'\n         class='componentLabel' >\n    What is the name of the environment?\n  </label>\n  <input id='Env'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.env}\n         on:change={() => { dispatch('change',{\n           script: config.script,\n           env: config.env,\n           envVar: config.envVar,\n           commandLine: config.commandLine,\n           type: config.type,\n           scriptImage: config.scriptImage\n         });}}\n  />\n  <label for='EnvVar'\n         class='componentLabel' >\n    What environment variables?\n  </label>\n  <input id='EnvVar'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.envVar}\n         on:change={() => { dispatch('change',{\n           script: config.script,\n           env: config.env,\n           envVar: config.envVar,\n           commandLine: config.commandLine,\n           type: config.type,\n           scriptImage: config.scriptImage\n         });}}\n  />\n  <label for='Type'\n         class='componentLabel' >\n    What type of script?\n  </label>\n  <select id='Type'\n         class=\"componentInput\"\n         bind:value={config.type}\n         on:blur={() => { dispatch('change',{\n           script: config.script,\n           env: config.env,\n           envVar: config.envVar,\n           commandLine: config.commandLine,\n           type: config.type,\n           scriptImage: config.scriptImage\n         });}}\n  >\n    <option value={\"textbar\"}>TextBar</option>\n    <option value={\"bitbar\"}>BitBar</option>\n    <option value={\"generic\"}>Generic</option>\n    <option value={\"web\"}>Web Page</option>\n  </select>\n  {#if config.type === \"textbar\"}\n    <label for='ScriptIcon'\n           class='componentLabel' >\n      What emoji?\n    </label>\n    <input id='ScriptIcon'\n           type=\"text\"\n           class=\"componentInput\"\n           bind:value={config.scriptImage}\n           on:change={() => { dispatch('change',{\n             script: config.script,\n             env: config.env,\n             envVar: config.envVar,\n             commandLine: config.commandLine,\n             type: config.type,\n             scriptImage: config.scriptImage\n           });}}\n    />\n  {/if}\n</div>\n\n<style>\n  #ScriptConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  const dispatch = createEventDispatcher();\n  \n  export let config = {\n    script: \"\",\n    env: \"\",\n    envVar: \"\",\n    commandLine: \"\",\n    scriptImage: \"\"\n  };\n  export let style;\n</script>\n\n",
    "<div class='main'  \n     style=\"height: {Math.floor(height)}px;\"\n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n     on:dblclick={(e) => { e.preventDefault(); dispatch('dblclick', {}); }}\n     bind:this={dom}>\n  <hr />\n</div>\n\n<style>\n  .main {\n    width: 100%;\n    height: 20px;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .main hr {\n    width: 100%;\n    margin: 0px;\n    padding: 0px;\n    align-self: center;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n  \n  const dispatch = createEventDispatcher();\n  \n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n</script>\n",
    "<div class='SeparatorConfig'>\n</div>\n\n<style>\n  .SeparatorConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  export let config;\n  export let style;\n</script>\n\n",
    "<div class='main'  \n     style=\"height: {Math.floor(height)}px;\"\n     on:contextmenu={(e) => { e.preventDefault(); middleButton(index);}}\n     bind:this={dom}>\n  <span class='weblinkname'\n    on:dblclick={(e) => { e.preventDefault(); dispatch('dblclick', {}); }}\n  >\n    {name}\n  </span>\n  <span class='weblinklink'\n     on:click={(e) => { openLink(); }}\n  >\n    {#if config.browser[0] === '/'}\n      {window.npath.basename(config.browser,'.app')}\n    {:else}\n      {config.browser}\n    {/if}\n  </span>\n</div>\n\n<style>\n  .main {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    margin: auto 0px auto 0px;\n    padding: 0px;\n  }\n\n  .weblinkname {\n    \n  }\n\n  .weblinklink {\n    margin: 0px 0px 0px auto;\n    cursor: pointer;\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let style;\n  export let name;\n  export let config;\n  export let socket;\n  export let index;\n  export let height;\n  export let dom;\n  \n  const dispatch = createEventDispatcher();\n  \n\n  function middleButton(index) {\n    dispatch('middleButton', {\n      index: index\n    })\n  }\n  //\n  // Function:     openLink\n  //\n  // Description:  This function opens the given link in the browser specified.\n  //\n  function openLink() {\n    if(config.browser === 'internal') {\n      fetch('http://localhost:9978/api/web/launch',{\n        method: \"PUT\",\n        headers: {\n          'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify({\n          url: config.link\n        })\n      });\n    } else if(config.browser === 'system') {\n      //\n      // Launch on the system default browser.\n      //\n      nw.Shell.openExternal(config.link);\n    } else {\n      //\n      // Launch using the specified program.\n      //\n      window.exec('/usr/bin/open -a \"' + config.browser + '\" \"' + config.link + '\"');\n    }\n  }\n</script>\n",
    "<div class='WebLinkConfig'>\n  <label for='LinkAddress'\n         class='componentLabel' >\n    What is the link address?\n  </label>\n  <input id='LinkAddress'\n         type=\"text\"\n         class=\"componentInput\"\n         bind:value={config.link}\n         on:change={() => { dispatch('change',{\n           link: config.link,\n           browser: config.browser\n         });}}\n  />\n  <label for='Browser'\n         class='componentLabel' >\n    What browser to use?\n  </label>\n  <select id='Browser'\n         class=\"componentInput\"\n         bind:value={config.browser}\n         on:change={() => { dispatch('change',{\n           link: config.link,\n           browser: config.browser\n         });}}\n  >\n    <option value=\"internal\">Internal</option>\n    <option value=\"system\">System Default</option>\n    {#each browserList as browser}\n      <option value=\"{browser.loc}\">{browser.name}</option>\n    {/each}\n  </select>\n</div>\n\n<style>\n  .WebLinkConfig {\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n  }\n  \n  .componentLabel {\n    margin: 5px 0px 5px 0px;\n  }\n\n  .componentInput {\n    margin: 5px 0px 10px 0px;\n    border-radius: 10px;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  \n  export let config;\n  export let style;\n  \n  const dispatch = createEventDispatcher();\n  \n  let browserList = [];\n  \n  onMount(() => {\n    //\n    // Figure out which browsers are on this computer.\n    //\n    if(window.fs.existsSync('/Applications/Safari.app')) {\n      browserList.push({\n        name: 'Safari',\n        loc: '/Applications/Safari.app'\n      });\n    }\n    if(window.fs.existsSync('/Applications/Google Chrome.app')) {\n      browserList.push({\n        name: 'Google Chrome',\n        loc: '/Applications/Google Chrome.app'\n      });\n    }\n    if(window.fs.existsSync('/Applications/FireFox.app')) {\n      browserList.push({\n        name: 'FireFox',\n        loc: '/Applications/FireFox.app'\n      });\n    }\n    if(window.fs.existsSync('/Applications/FireFox Nightly.app')) {\n      browserList.push({\n        name: 'FireFox Nightly',\n        loc: '/Applications/FireFox Nightly.app'\n      });\n    }\n    browserList = browserList;\n  })\n</script>\n",
    "<Header background=\"{styles.appBackground}\" width=\"{headerWidth}\" height=\"{window.preferences.headerHeight}\" />\n<div id='webview' \n     style='background-color: {styles.appBackground};\n            color: {styles.textcolor};\n            font-family: {styles.fontFamily};\n            font-size: {styles.fontSize};\n            width: {body.config.width}px;\n            height: {body.config.height}px;'>\n  {@html body.html}\n  {#if body.config.showButton}\n    <div id='buttonRow'>\n      <button id=\"closeButton\"\n              type=\"button\"\n              color=\"{styles.appBackground}\"\n              on:click=\"{() => { close(); }}\" >\n        Close\n      </button>\n    </div>\n  {/if}\n</div>\n\n<style>\n  #webview {\n    display: flex;\n    flex-direction: column;\n    margin: 0px;\n    padding: 5px;\n    border-radius: 10px;\n    overflow-wrap: anywhere;\n  }\n\n  #buttonRow {\n    display: flex;\n    flex-direction: row;\n    margin: 0px;\n    padding: 0px;\n  }\n\n  #closeButton {\n    border-radius: 5px;\n    font-size: 15px;\n    height: 30px;\n    outline: none;\n    margin: 10px auto 10px auto;\n    padding: 6px 6px 6px 6px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    outline-style:none;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n</style>\n\n<script>\n  import { createEventDispatcher, onMount } from 'svelte';\n  import Header from './Header.svelte';\n\n  export let styles;\n  export let body;\n  export let adjust;\n\n  const dispatch = createEventDispatcher();\n\n  let headerWidth;\n  \n  ; headerWidth = bodyChange(body);\n\n  onMount(() => {\n    globalThis.closeWebView = close;\n    headerWidth = bodyChange(body);\n  });\n\n  function bodyChange(bod) {\n    if(typeof body.config.width !== 'undefined') {\n      adjust(false, body.config.height + 21, body.config.width + 10);\n      return(body.config.width + 10);\n    } else {\n      return(window.defaults.width);\n    }\n  }\n\n  function close() {\n    dispatch('changeView',{\n      name: 'scriptbar',\n      body: {\n      }\n    });\n  }\n</script>\n\n",
    "<svelte:head>\n    <title>ScriptBar</title>\n</svelte:head>\n\n<svelte:window on:blur=\"{() => {if(onBlur !== null) onBlur();}}\" \n               on:close=\"{() => { if(onClose !== null) onClose();}}\" />\n\n{#if view === 'scriptbar'}\n  <ScriptBar \n    adjust={adjust}\n    styles={styles}\n    oldState={scriptbar}\n    onClose={onClose}\n    on:changeView={(e) => {viewChange(e.detail);}}\n  />\n{:else if view === 'webview'}\n  <WebView\n    styles={styles}\n    body={body}\n    on:changeView={(e) => {viewChange(e.detail);}}\n    adjust={adjust}\n  />\n{:else}\n  <div id='errorPage'>\n    <h1>Something went wrong</h1>\n    <p>Sorry, but you somehow got to a place that isn't reachable.</p>\n    <p>Press be button below to get back to the normal page.</p>\n    <button\n      on:click={() => { view = 'scriptbar'}}\n    >\n      Go Back\n    </button>\n  </div>\n{/if}\n\n<style>\n  #errorPage {\n    display: flex;\n    flex-direction: column;\n    background-color: white;\n    color: black;\n  }\n\n  #errorPage button {\n    border-radius: 5px;\n    font-size: 15px;\n    height: 30px;\n    outline: none;\n    margin: 10px auto 10px auto;\n    padding: 6px 6px 6px 6px;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    outline-style:none;\n    background-color: rgba(255, 255, 255, 0.3);\n  }\n\n  :global(body) {\n    margin: 0px;\n    padding: 0px;\n    border: 0px;\n    background-color: transparent;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    -webkit-tap-highlight-color:transparent;\n    outline-style:none;\n    font-family: 'Lucida Console', Monaco, monospace;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    cursor: default;\n    border: 0px solid transparent;\n    border-radius: 10px;\n    overflow: hidden;\n  }\n</style>\n\n<script>\n  import { onMount } from 'svelte';\n  \n  import ScriptBar from './components/ScriptBar.svelte';\n  import WebView from './components/WebView.svelte';\n\n  export let onBlur;\n  export let onClose;\n  export let adjust;\n  export let prefs;\n  \n  let styles = {\n      appBackground: '#191B1E',\n      textcolor: '#B3B0B0',\n      fontSize: '14px',\n      fontFamily: 'Arial'\n    };\n  let view = 'scriptbar';     // which view page to display. Default to scriptbar.\n  let body = {                // WebView configuration information. This is minimum.\n    html: '<h1>Web View</h1>',\n    config: {\n      width: 200,\n      height: 400\n    }\n  }\n  let scriptbar;\n  \n  //\n  // Function:    viewChange\n  //\n  // Description: A function to change the view being displayed. Sort of a page \n  //              controler. It also saves information from a previous page used \n  //              to get back to the original location.\n  //\n  function viewChange(viewChange) {\n    //\n    // See if the view change parameter has a scriptbar section. If so, \n    // save it for future returns.\n    //\n    if( typeof viewChange.scriptbar !== 'undefined') {\n      scriptbar = viewChange.scriptbar;\n    } \n\n    //\n    // Set the view name and the configuration (body) for the view. This is \n    // designed to go from scriptbar view to web view with the body containing \n    // the html and configurations for the website.\n    //\n    view = viewChange.name;\n    body = viewChange.body;\n\n    if(view === 'scriptbar') {\n      //\n      // Coming back to scriptbar, set the default application width.\n      //\n      window.preferences.appWidth = globalThis.defaults.width;\n    }\n  }\n</script>\n"
  ],
  "names": [],
  "mappings": "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"
}